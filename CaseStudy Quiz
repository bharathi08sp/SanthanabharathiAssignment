# questions.toml

[[questions]]
question = "When was the first known use of the word 'quiz'"
answer = "1781"
alternatives = ["1771", "1871", "1881"]

[[questions]]
question = "Which built-in function can get information from the user"
answer = "input"
alternatives = ["get", "print", "write"]

[[questions]]
question = "What's the purpose of the built-in zip() function"
answer = "To iterate over two or more sequences at the same time"
alternatives = [
    "To combine several strings into one",
    "To compress several files into one archive",
    "To get information from the user",
]

[[questions]]
question = "What does dict.get(key) return if key isn't found in dict"
answer = "None"
alternatives = ["key", "True", "False"]

[[questions]]
question = "How do you iterate over both indices and elements in an iterable"
answer = "enumerate(iterable)"
alternatives = [
    "enumerate(iterable, start=1)",
    "range(iterable)",
    "range(iterable, start=1)",
]

[[questions]]
question = "What's the official name of the := operator"
answer = "Assignment expression"
alternatives = ["Named expression", "Walrus operator", "Colon equals operator"]

[[questions]]
question = "What's one effect of calling random.seed(42)"
answer = "The random numbers are reproducible."
alternatives = [
    "The random numbers are more random.",
    "The computer clock is reset.",
    "The first random number is always 42.",
]

[[questions]]
question = "When does __name__ == '__main__' equal True in a Python file"
answer = "When the file is run as a script"
alternatives = [
    "When the file is imported as a module",
    "When the file has a valid name",
    "When the file only has one function",
]

[[questions]]
question = "Which version of Python is the first with TOML support built in"
answer = "3.11"
alternatives = ["3.9", "3.10", "3.12"]

[[questions]]
question = "What's the name of the list-like data structure in TOML"
answer = "Array"
alternatives = ["List", "Sequence", "Set"]




# quiz.py

import pathlib
import random
from string import ascii_lowercase
try:
    import tomllib
except ModuleNotFoundError:
    import tomli as tomllib

NUM_QUESTIONS_PER_QUIZ = 5
QUESTIONS_PATH = pathlib.Path(__file__).parent / "questions.toml"

def run_quiz():
    questions = prepare_questions(
        QUESTIONS_PATH, num_questions=NUM_QUESTIONS_PER_QUIZ
    )

    num_correct = 0
    for num, question in enumerate(questions, start=1):
        print(f"\nQuestion {num}:")
        num_correct += ask_question(question)

    print(f"\nYou got {num_correct} correct out of {num} questions")

def prepare_questions(path, num_questions):
    questions = tomllib.loads(path.read_text())["questions"]
    num_questions = min(num_questions, len(questions))
    return random.sample(questions, k=num_questions)

def ask_question(question):
    correct_answer = question["answer"]
    alternatives = [question["answer"]] + question["alternatives"]
    ordered_alternatives = random.sample(alternatives, k=len(alternatives))

    answer = get_answer(question["question"], ordered_alternatives)
    if answer == correct_answer:
        print("⭐ Correct! ⭐")
        return 1
    else:
        print(f"The answer is {correct_answer!r}, not {answer!r}")
        return 0

def get_answer(question, alternatives):
    print(f"{question}?")
    labeled_alternatives = dict(zip(ascii_lowercase, alternatives))
    for label, alternative in labeled_alternatives.items():
        print(f"  {label}) {alternative}")

    while (answer_label := input("\nChoice? ")) not in labeled_alternatives:
        print(f"Please answer one of {', '.join(labeled_alternatives)}")

    return labeled_alternatives[answer_label]

if __name__ == "__main__":
    run_quiz()
